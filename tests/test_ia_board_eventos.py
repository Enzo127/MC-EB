import unittest
import ia_board_events
import tablero
'''
Voy a realizar 2 testeos (uno como jugador blanco y otro como jugador negro):

_El primer test va paso a paso por cada funcion que compone "analizador_eventos" 
_El segundo test es completo con la funcion "analizador_eventos"
'''
class test_ia_board_eventos(unittest.TestCase):
    def setUp(self):
        self.juego = tablero.Game(True)
        self.juego.board = [
            ['r', 'r', 'h', 'h', 'b', 'b', 'q', 'q', 'k', 'k', 'b', 'b', 'h', 'h', 'r', 'r'],
            ['r', 'r', 'h', 'h', 'b', 'b', 'q', 'Q', 'k', 'k', 'b', 'b', 'h', 'h', 'r', 'r'],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            [' ', ' ', ' ', ' ', 'Q', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'Q'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', 'q', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', 'P', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['k', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k'],
            ['P', 'P', 'P', 'P', 'P', ' ', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
            ['R', 'R', 'H', 'H', 'B', 'q', 'Q', 'Q', 'K', 'K', 'B', 'B', 'H', 'H', 'R', 'R'],
            ['R', 'R', 'H', 'H', 'B', 'B', 'Q', 'Q', 'K', 'K', 'B', 'B', 'H', 'H', 'R', 'R']]
        
        change=0                                                       
        self.moves       = self.juego.get_all_possible_moves(change)              
        change=1                                                       
        self.moves_enemy = self.juego.get_all_possible_moves(change) 

#---------------------------------------------------------------1er test---------------------------------------------------------------------
    #Mapeo con mis movimientos (como jugador blanco)
    def test_move_not_capture_pawn_1(self):                                                                                      
        board_eventos =[[" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "],
                        [" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "]]

        board_expected=[[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]


        board_received = ia_board_events.move_not_capture_pawn(self.juego.color, board_eventos ,self.juego.board , True)
        self.assertEqual(board_received ,board_expected)


    def test_move_not_capture_mine(self):
        board_event   =[[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_expected=[[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        ['+', '+', '+', '+', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', '+'],
                        [' ', '+', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+'],
                        ['+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_received = ia_board_events.move_not_capture_mine(self.moves, board_event)
        self.assertEqual(board_received ,board_expected)


    def test_move_with_capture_mine(self):
        board_event   =[[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        ['+', '+', '+', '+', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', '+'],
                        [' ', '+', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+'],
                        ['+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_expected=[[' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x'],
                        ['+', '+', '+', '+', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', '+'],
                        [' ', '+', ' ', ' ', 'x', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+'],
                        ['+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['x', 'x', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', 'x'],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_received = ia_board_events.move_with_capture_mine(self.moves, board_event)
        self.assertEqual(board_received ,board_expected)




    #Posterior a mi mapeo como jugador blanco, mapeo con los movimientos del rival
    def test_move_not_capture_pawn_2(self):                                                                                      
        board_eventos =[[' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x'],
                        ['+', '+', '+', '+', ' ', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', ' '],
                        [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', '+'],
                        [' ', '+', ' ', ' ', 'x', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+'],
                        ['+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['x', 'x', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', 'x'],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_expected=[[' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        ['-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-', '-', '?', '?'],
                        ['#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' '],
                        [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', '-', ' ', '-', ' ', '+', ' ', '+'],
                        [' ', '+', ' ', ' ', 'x', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+'],
                        ['+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['x', 'x', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', 'x'],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]


        board_received = ia_board_events.move_not_capture_pawn(not self.juego.color, board_eventos ,self.juego.board , False)
        self.assertEqual(board_received ,board_expected)

    
    def test_move_not_capture_enemy(self):
        board_event   =[[' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', 'x', 'x', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', 'x'],
                        ['#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' '],
                        [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', '-', ' ', '-', ' ', '+', ' ', '+'],
                        [' ', '+', ' ', ' ', 'x', ' ', ' ', '+', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+'],
                        ['+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', '+', ' ', '+', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['x', 'x', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', '+', 'x'],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_expected=[['-', '-', '-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '?', ' ', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '?', '?', 'x', ' ', ' ', '-', ' ', ' ', '-', '-', '-', '?', 'x'],
                        ['#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' '],
                        [' ', ' ', '-', '+', '#', '+', '-', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', '-', '#', '-', '+', ' ', ' ', '-', ' ', '-', ' ', '+', ' ', '+'],
                        ['-', '#', '-', '-', 'x', '-', '-', '#', '-', '-', '-', '-', '#', '-', '-', '#'],
                        ['+', ' ', ' ', '-', '-', '-', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', '-', ' ', '#', ' ', '#', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['-', '-', '-', ' ', '-', ' ', ' ', '-', ' ', '+', '+', ' ', ' ', ' ', '-', '#'],
                        ['?', '?', '#', '+', '#', '+', '+', '+', '#', '+', '+', '+', '+', '+', '#', 'x'],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_received = ia_board_events.move_not_capture_enemy(self.moves_enemy, board_event)
        self.assertEqual(board_received ,board_expected)


    def test_move_with_capture_enemy(self):
        board_event   =[['-', '-', '-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '?', ' ', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '?', '?', 'x', ' ', ' ', '-', ' ', ' ', '-', '-', '-', '?', 'x'],
                        ['#', '#', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' '],
                        [' ', ' ', '-', '+', '#', '+', '-', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', '-', '#', '-', '+', ' ', ' ', '-', ' ', '-', ' ', '+', ' ', '+'],
                        ['-', '#', '-', '-', 'x', '-', '-', '#', '-', '-', '-', '-', '#', '-', '-', '#'],
                        ['+', ' ', ' ', '-', '-', '-', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', '-', ' ', '#', ' ', '#', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['-', '-', '-', ' ', '-', ' ', ' ', '-', ' ', '+', '+', ' ', ' ', ' ', '-', '#'],
                        ['?', '?', '#', '+', '#', '+', '+', '+', '#', '+', '+', '+', '+', '+', '#', 'x'],
                        [' ', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', 'x', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        #Este seria el mapeo final con el que trabajaria la IA
        board_expected=[['-', '-', '-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '?', '&', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '-', '-'],
                        ['-', '-', '-', '?', '?', 'x', ' ', ' ', '-', ' ', ' ', '-', '-', '-', '?', 'x'],
                        ['#', '#', '#', '#', '&', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '&'],
                        [' ', ' ', '-', '+', '#', '+', '-', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '+', '+'],
                        [' ', ' ', '+', '-', '#', '-', '+', ' ', ' ', '-', ' ', '-', ' ', '+', ' ', '+'],
                        ['-', '#', '-', '-', 'x', '-', '-', '#', '-', '-', '-', '-', '#', '-', '-', '#'],
                        ['+', ' ', ' ', '-', '-', '-', ' ', ' ', '+', ' ', ' ', '+', ' ', ' ', ' ', '+'],
                        [' ', ' ', '-', ' ', '#', ' ', '#', ' ', ' ', '+', '+', ' ', ' ', ' ', ' ', '+'],
                        ['-', '-', '-', ' ', '-', ' ', ' ', '-', ' ', '+', '+', ' ', ' ', ' ', '-', '#'],
                        ['?', '?', '#', '+', '#', '+', '+', '+', '#', '+', '+', '+', '+', '+', '#', 'x'],
                        ['&', '&', '&', ' ', '&', '+', ' ', ' ', ' ', '&', ' ', ' ', ' ', ' ', '&', '&'],
                        [' ', ' ', ' ', ' ', '&', '&', '&', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', '&', 'x', '&', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', '&', '&', '&', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]

        board_received = ia_board_events.move_with_capture_enemy(self.moves_enemy, board_event)
        self.assertEqual(board_received ,board_expected)

#---------------------------------------------------------------2do test---------------------------------------------------------------------
    
    def test_clasificacion(self):
        juego_2 = tablero.Game(False)
        juego_2.board =[['r', 'r', 'h', 'h', 'b', 'b', 'q', 'q', 'k', 'k', 'b', 'b', 'h', 'h', 'r', 'r'],
                        ['r', 'r', 'h', 'H', 'b', 'b', 'q', 'Q', 'k', 'k', 'b', 'B', 'h', 'h', 'r', 'r'],
                        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
                        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', ' ', 'p', 'p', 'p', 'p', 'p', 'p'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', ' ', ' ', ' ', ' ', 'Q'],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'P', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', 'q', ' ', ' ', ' ', 'P', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                        [' ', 'k', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k'],
                        ['P', 'P', 'P', 'P', 'P', ' ', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
                        ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
                        ['R', 'R', 'H', 'H', 'B', 'q', 'Q', 'Q', 'K', 'K', 'B', 'B', 'r', 'H', 'R', 'R'],
                        ['R', 'R', 'H', 'H', 'B', 'B', 'Q', 'Q', 'K', 'K', 'B', 'B', 'H', 'H', 'R', 'R']]
        
        change=0                                                       
        moves       = juego_2.get_all_possible_moves(change)              
        change=1                                                       
        moves_enemy = juego_2.get_all_possible_moves(change) 


        analisis_expected =[[' ', '&', ' ', ' ', ' ', '&', '&', '&', '&', ' ', '&', ' ', '&', ' ', ' ', ' '],
                            [' ', ' ', ' ', 'x', ' ', ' ', '&', 'x', '&', ' ', ' ', 'x', ' ', ' ', ' ', ' '],
                            [' ', '&', ' ', ' ', ' ', '&', '&', '&', '&', ' ', '&', ' ', '&', ' ', ' ', ' '],
                            [' ', ' ', '&', ' ', '&', ' ', ' ', ' ', ' ', '+', ' ', ' ', ' ', ' ', '&', '&'],
                            ['+', '+', '+', '+', '+', '+', '+', '+', '+', '&', '#', '#', '#', '#', '#', 'x'],
                            [' ', '+', ' ', ' ', '+', ' ', ' ', '+', '+', ' ', 'x', ' ', ' ', ' ', '-', '-'],
                            [' ', ' ', '+', ' ', '+', ' ', '+', ' ', ' ', ' ', ' ', ' ', ' ', '-', ' ', '-'],
                            [' ', ' ', ' ', '+', '+', '+', ' ', '-', ' ', '-', ' ', ' ', '-', ' ', ' ', '-'],
                            ['+', '+', '+', '+', ' ', '+', '+', '+', 'x', ' ', ' ', '-', ' ', ' ', ' ', '-'],
                            [' ', ' ', ' ', '+', '+', '+', ' ', ' ', ' ', ' ', '-', ' ', ' ', ' ', ' ', '-'],
                            ['+', '+', '+', ' ', '+', ' ', '+', ' ', ' ', '-', ' ', ' ', ' ', ' ', '+', '#'],
                            ['#', '&', '#', '-', '#', '-', '-', '#', '-', '-', '-', '-', '-', '-', '#', '&'],
                            ['?', '?', '?', '-', '?', '-', '-', '-', '?', '-', '-', '-', '-', '-', '?', '?'],
                            ['-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '?', '-', '-', '-'],
                            ['-', '-', '-', '-', '?', '&', '?', '-', '-', '-', '-', '?', '&', '?', '-', '-'],
                            ['-', '-', '-', '-', '?', '?', '?', '-', '-', '-', '-', '-', '?', '-', '-', '-']]

        

        result = ia_board_events.event_maker(moves ,moves_enemy ,juego_2.color ,juego_2.board) 

        self.assertEqual(analisis_expected, result)
        